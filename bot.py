# bot.py

import os
import logging
import traceback
import asyncio
import re
from functools import partial
from typing import List, Set, Tuple
from datetime import datetime
from zoneinfo import ZoneInfo

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv

# --- Imports do gerador preditivo ---
from utils.history import carregar_historico, ultimos_n_concursos
from utils.predictor import Predictor, GeradorApostasConfig, FilterConfig
# --- Import do backtest ---
from utils.backtest import executar_backtest_resumido

# ========================
# Carrega vari√°veis de ambiente locais
# ========================
load_dotenv()

# ========================
# Logging
# ========================
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ========================
# Par√¢metros padr√£o do gerador
# ========================
# Defini√ß√µes padr√£o:
#   - quantidade: 5 apostas
#   - janela:     100 concursos do hist√≥rico
#   - alpha:      0.30 (recomendado para elevar %‚â•11 por aposta)
JANELA_PADRAO = 100
ALPHA_PADRAO = 0.30
QTD_BILHETES_PADRAO = 5

SHOW_TIMESTAMP = True
TIMEZONE = "America/Sao_Paulo"

# Limites defensivos
JANELA_MIN, JANELA_MAX = 50, 1000
ALPHA_MIN, ALPHA_MAX = 0.05, 0.95
BILH_MIN, BILH_MAX   = 1, 20

HISTORY_PATH = "data/history.csv"
WHITELIST_PATH = "whitelist.txt"

# Cooldown (segundos) para evitar flood
COOLDOWN_SECONDS = 10

# ========================
# Bot Principal
# ========================
class LotoFacilBot:
    def __init__(self):
        self.token = self._get_bot_token()
        self.admin_id = self._get_admin_id()
        self.whitelist_path = WHITELIST_PATH
        self.whitelist = self._carregar_whitelist()
        self._garantir_admin_na_whitelist()
        self.app = ApplicationBuilder().token(self.token).build()
        # mapa de cooldown: {(chat_id, comando): timestamp}
        self._cooldown_map = {}
        self._setup_handlers()

    # ------------- Utilidades internas -------------
    def _get_bot_token(self) -> str:
        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not token:
            raise EnvironmentError("Vari√°vel TELEGRAM_BOT_TOKEN n√£o configurada.")
        return token

    def _get_admin_id(self) -> int:
        admin_id = os.getenv("ADMIN_TELEGRAM_ID")
        if not admin_id or not admin_id.isdigit():
            raise EnvironmentError("ADMIN_TELEGRAM_ID n√£o configurado corretamente.")
        return int(admin_id)

    def _carregar_whitelist(self) -> Set[int]:
        """Carrega os IDs autorizados do arquivo de whitelist."""
        if not os.path.exists(self.whitelist_path):
            return set()
        with open(self.whitelist_path, "r", encoding="utf-8") as f:
            return set(int(l.strip()) for l in f if l.strip().isdigit())

    def _salvar_whitelist(self):
        """Salva a whitelist atual no arquivo (grava√ß√£o at√¥mica)."""
        tmp_path = self.whitelist_path + ".tmp"
        with open(tmp_path, "w", encoding="utf-8") as f:
            for user_id in sorted(self.whitelist):
                f.write(f"{user_id}\n")
        os.replace(tmp_path, self.whitelist_path)

    def _garantir_admin_na_whitelist(self):
        """Garante que o administrador esteja sempre autorizado."""
        if self.admin_id not in self.whitelist:
            self.whitelist.add(self.admin_id)
            self._salvar_whitelist()
            logger.info(f"Administrador {self.admin_id} autorizado automaticamente.")

    def _usuario_autorizado(self, user_id: int) -> bool:
        return user_id in self.whitelist

    def _is_admin(self, user_id: int) -> bool:
        return user_id == self.admin_id

    def _hit_cooldown(self, chat_id: int, comando: str) -> bool:
        """
        Retorna True se o cooldown ainda estiver ativo para (chat_id, comando).
        Caso contr√°rio, atualiza o timestamp e retorna False.
        """
        import time
        key = (chat_id, comando)
        now = time.time()
        last = self._cooldown_map.get(key, 0)
        if now - last < COOLDOWN_SECONDS:
            return True
        self._cooldown_map[key] = now
        return False

    # --------- Valida√ß√µes e clamps de par√¢metros ---------
    def _clamp_params(self, qtd: int, janela: int, alpha: float) -> Tuple[int, int, float]:
        qtd = max(BILH_MIN, min(BILH_MAX, int(qtd)))
        janela = max(JANELA_MIN, min(JANELA_MAX, int(janela)))
        alpha = float(alpha)
        if alpha < ALPHA_MIN or alpha > ALPHA_MAX:
            alpha = ALPHA_PADRAO
        return qtd, janela, alpha

    # ------------- Gerador preditivo -------------
    def _gerar_apostas_inteligentes(
        self,
        qtd: int = QTD_BILHETES_PADRAO,
        janela: int = JANELA_PADRAO,
        alpha: float = ALPHA_PADRAO,
    ) -> List[List[int]]:
        """
        Gera bilhetes usando o preditor configurado.
        - Aplica pool (3x) e filtro p√≥s-gera√ß√£o (pares 6‚Äì9; colunas 1‚Äì4; relaxamento).
        Em caso de falha, aplica fallback uniforme.
        """
        try:
            qtd, janela, alpha = self._clamp_params(qtd, janela, alpha)
            historico = carregar_historico(HISTORY_PATH)
            janela_hist = ultimos_n_concursos(historico, janela)

            filtro = FilterConfig(
                paridade_min=6,
                paridade_max=9,
                col_min=1,
                col_max=4,
                relax_steps=2,
            )

            cfg = GeradorApostasConfig(
                janela=janela,
                alpha=alpha,
                filtro=filtro,
                pool_multiplier=3,
            )
            modelo = Predictor(cfg)
            modelo.fit(janela_hist, janela=janela)
            return modelo.gerar_apostas(qtd=qtd)
        except Exception:
            logger.error("Falha no gerador preditivo; aplicando fallback.\n" + traceback.format_exc())
            import random
            rng = random.Random()
            return [sorted(rng.sample(range(1, 26), 15)) for _ in range(max(1, qtd))]

    # ------------- Parse utilit√°rio p/ backtest -------------
    def _parse_backtest_args(self, args: List[str]) -> Tuple[int, int, float]:
        """
        Aceita:
          - Posicional: /backtest [janela] [bilhetes_por_concurso] [alpha]
          - Chave=valor: /backtest janela=200 bilhetes=5 alpha=0,30
          - Aliases: j=, b=, a=
        Retorna par√¢metros validados.
        """
        janela = JANELA_PADRAO
        bilhetes_por_concurso = QTD_BILHETES_PADRAO
        alpha = ALPHA_PADRAO

        if not args:
            return janela, bilhetes_por_concurso, alpha

        joined = " ".join(args).strip().replace(",", ".")
        joined = re.sub(r"\bj\s*=", "janela=", joined)
        joined = re.sub(r"\bb(ilhetes)?\s*=", "bilhetes=", joined)
        joined = re.sub(r"\ba\s*=", "alpha=", joined)
        has_kv = bool(re.search(r"\b(janela|bilhetes|alpha)\s*=", joined))

        if has_kv:
            m_j = re.search(r"\bjanela\s*=\s*(\d{1,5})\b", joined)
            if m_j: janela = int(m_j.group(1))
            m_b = re.search(r"\bbilhetes\s*=\s*(\d{1,3})\b", joined)
            if m_b: bilhetes_por_concurso = int(m_b.group(1))
            m_a = re.search(r"\balpha\s*=\s*([01]?(?:\.\d+)?)\b", joined)
            if m_a: alpha = float(m_a.group(1))
        else:
            try:
                if len(args) >= 1: janela = int(args[0])
                if len(args) >= 2: bilhetes_por_concurso = int(args[1])
                if len(args) >= 3: alpha = float(args[2].replace(",", "."))
            except Exception:
                pass

        # Clamp final
        bilhetes_por_concurso, janela, alpha = self._clamp_params(bilhetes_por_concurso, janela, alpha)
        return janela, bilhetes_por_concurso, alpha

    # ------------- Handlers -------------
    def _setup_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("gerar", self.gerar_apostas))
        self.app.add_handler(CommandHandler("meuid", self.meuid))
        self.app.add_handler(CommandHandler("autorizar", self.autorizar))
        self.app.add_handler(CommandHandler("remover", self.remover))
        self.app.add_handler(CommandHandler("backtest", self.backtest))  # oculto (s√≥ admin)
        # --- Novo handler: /mestre ---
        self.app.add_handler(CommandHandler("mestre", self.mestre))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start ‚Äì mensagem de boas-vindas e aviso legal."""
        mensagem = (
            "‚ö†Ô∏è <b>Aviso Legal</b>\n"
            "Este bot √© apenas para fins estat√≠sticos e recreativos. "
            "N√£o h√° garantia de ganhos na Lotof√°cil.\n\n"
            "üéâ <b>Bem-vindo</b>\n"
            "Use /gerar para receber 5 apostas baseadas em 100 concursos e Œ±=0,30.\n"
            "Use /meuid para obter seu identificador e solicitar autoriza√ß√£o.\n"
        )
        await update.message.reply_text(mensagem, parse_mode="HTML")

    async def gerar_apostas(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Comando /gerar ‚Äì Gera apostas inteligentes.
        Uso: /gerar [qtd] [janela] [alpha]
        Padr√£o: 5 apostas | janela=100 | Œ±=0,30
        """
        user_id = update.effective_user.id
        if not self._usuario_autorizado(user_id):
            await update.message.reply_text("‚õî Voc√™ n√£o est√° autorizado a gerar apostas.")
            return

        qtd, janela, alpha = QTD_BILHETES_PADRAO, JANELA_PADRAO, ALPHA_PADRAO

        try:
            if context.args and len(context.args) >= 1: qtd = int(context.args[0])
            if context.args and len(context.args) >= 2: janela = int(context.args[1])
            if context.args and len(context.args) >= 3: alpha = float(context.args[2].replace(",", "."))
        except Exception:
            pass

        qtd, janela, alpha = self._clamp_params(qtd, janela, alpha)

        try:
            apostas = self._gerar_apostas_inteligentes(qtd=qtd, janela=janela, alpha=alpha)
            resposta = self._formatar_resposta(apostas, janela, alpha)
            await update.message.reply_text(resposta, parse_mode="HTML")
        except Exception:
            logger.error("Erro ao gerar apostas:\n" + traceback.format_exc())
            await update.message.reply_text("Erro ao gerar apostas. Tente novamente.")

    def _formatar_resposta(self, apostas: List[List[int]], janela: int, alpha: float) -> str:
        """Formata a resposta com apostas + rodap√© informativo."""
        linhas = ["üé∞ <b>SUAS APOSTAS INTELIGENTES</b> üé∞\n"]
        for i, aposta in enumerate(apostas, 1):
            pares = sum(1 for n in aposta if n % 2 == 0)
            linhas.append(
                f"<b>Aposta {i}:</b> {' '.join(f'{n:02d}' for n in aposta)}\n"
                f"üî¢ Pares: {pares} | √çmpares: {15 - pares}\n"
            )
        if SHOW_TIMESTAMP:
            now_sp = datetime.now(ZoneInfo(TIMEZONE))
            carimbo = now_sp.strftime("%Y-%m-%d %H:%M:%S %Z")
            linhas.append(f"<i>janela={janela} | Œ±={alpha:.2f} | {carimbo}</i>")
        return "\n".join(linhas)

    # ---------- Utilit√°rios Mestre (baseado s√≥ no √∫ltimo resultado) ----------
    @staticmethod
    def _contar_pares(aposta):
        return sum(1 for n in aposta if n % 2 == 0)

    @staticmethod
    def _max_seq(aposta):
        """Maior sequ√™ncia consecutiva (ex.: [7,8,9] = 3)."""
        s = sorted(aposta)
        best = cur = 1
        for i in range(1, len(s)):
            if s[i] == s[i-1] + 1:
                cur += 1
                best = max(best, cur)
            else:
                cur = 1
        return best

    @staticmethod
    def _complemento(last_set):
        return [n for n in range(1, 26) if n not in last_set]

    def _ajustar_paridade_e_seq(self, aposta, alvo_par=(7, 8), max_seq=3):
        """
        Ajusta determin√≠sticamente a aposta para paridade 7‚Äì8 e m√°x. sequ√™ncia 3,
        trocando com n√∫meros do complemento (1..25 \ aposta).
        """
        aposta = sorted(set(aposta))
        comp = [n for n in range(1, 26) if n not in aposta]

        def tentar_quebrar_sequencias(a):
            # Se houver sequ√™ncia > max_seq, substitui sempre o maior da sequ√™ncia por um n√∫mero do comp que n√£o crie nova sequ√™ncia
            changed = False
            while self._max_seq(a) > max_seq and comp:
                s = sorted(a)
                # encontra uma sequ√™ncia longa
                start = s[0]
                run_len = 1
                seqs = []
                for i in range(1, len(s)):
                    if s[i] == s[i-1] + 1:
                        run_len += 1
                    else:
                        if run_len > 1:
                            seqs.append((start, s[i-1], run_len))
                        start = s[i]
                        run_len = 1
                if run_len > 1:
                    seqs.append((start, s[-1], run_len))
                # pega a maior sequ√™ncia
                seqs.sort(key=lambda t: t[2], reverse=True)
                _, fim, _ = seqs[0]
                # troca o fim da sequ√™ncia
                subs = None
                for c in comp:
                    if (c-1 not in a) and (c+1 not in a):  # tenta n√£o criar sequ√™ncia nova
                        subs = c
                        break
                if subs is None:
                    subs = comp[0]
                a.remove(fim)
                a.append(subs)
                comp.remove(subs)
                changed = True
                a.sort()
            return changed

    def _construir_aposta_por_repeticao(self, last_sorted, comp_sorted, repeticoes, offset_last=0, offset_comp=0):
        """
        Monta uma aposta determin√≠stica com 'repeticoes' vindas do √∫ltimo resultado,
        completando com ausentes. Usa offsets para variar jogos de forma reprodut√≠vel.
        """
        # seleciona 'repeticoes' do √∫ltimo resultado, rotacionando pelo offset
        L = last_sorted
        C = comp_sorted
        base = L[offset_last % 15:] + L[:offset_last % 15]
        manter = base[:repeticoes]  # repeticoes itens
        # completa com ausentes (determin√≠stico via offset_comp)
        faltam = 15 - len(manter)
        comp_rot = C[offset_comp % len(C):] + C[:offset_comp % len(C)]
        completar = comp_rot[:faltam]
        aposta = sorted(set(manter + completar))
        # garante 15
        if len(aposta) < 15:
            for n in C:
                if n not in aposta:
                    aposta.append(n)
                if len(aposta) == 15:
                    break
        return sorted(aposta)

    def _gerar_mestre_por_ultimo_resultado(self, historico):
        """
        Gera 10 apostas determin√≠sticas a partir do √∫ltimo resultado:
        - 1x com 8R
        - 1x com 11R
        - demais com 9‚Äì10R
        Regras: paridade 7‚Äì8 e max_seq=3, cobrindo ausentes.
        """
        ultimo = sorted(historico[-1])
        comp = self._complemento(set(ultimo))

        # plano de repeti√ß√£o (10 jogos): 10,10,9,9,10,9,10,8,11,10
        planos = [10, 10, 9, 9, 10, 9, 10, 8, 11, 10]

        apostas = []
        for i, r in enumerate(planos):
            aposta = self._construir_aposta_por_repeticao(
                last_sorted=ultimo,
                comp_sorted=comp,
                repeticoes=r,
                offset_last=i,    # rotaciona quais dezenas do √∫ltimo ficam/saem
                offset_comp=i*2,  # rotaciona quais ausentes entram
            )
            aposta = self._ajustar_paridade_e_seq(aposta, alvo_par=(7, 8), max_seq=3)
            apostas.append(aposta)

        # cobertura de ausentes: se algum ausente n√£o entrou em nenhuma aposta, force inclus√£o trocando da √∫ltima aposta
        ausentes = set(comp)
        presentes_em_alguma = set(n for a in apostas for n in a)
        faltantes = [n for n in ausentes if n not in presentes_em_alguma]
        if faltantes:
            a = apostas[-1][:]
            for n in faltantes:
                # substitui o maior n√∫mero da aposta que pertence ao √∫ltimo resultado para inserir um ausente
                subs_idx = next((idx for idx, x in enumerate(reversed(a)) if x in ultimo), None)
                if subs_idx is not None:
                    idx_real = len(a) - 1 - subs_idx
                    a[idx_real] = n
                    a.sort()
            a = self._ajustar_paridade_e_seq(a, alvo_par=(7, 8), max_seq=3)
            apostas[-1] = a

        return apostas

    def _ajustar_paridade_e_seq(self, aposta, alvo_par=(7, 8), max_seq=3):
        """
        Ajusta determin√≠sticamente a aposta para paridade 7‚Äì8 e m√°x. sequ√™ncia 3,
        trocando com n√∫meros do complemento (1..25 \ aposta).
        """
        aposta = sorted(set(aposta))
        comp = [n for n in range(1, 26) if n not in aposta]

        def tentar_quebrar_sequencias(a):
            changed = False
            while self._max_seq(a) > max_seq and comp:
                s = sorted(a)
                start = s[0]
                run_len = 1
                seqs = []
                for i in range(1, len(s)):
                    if s[i] == s[i-1] + 1:
                        run_len += 1
                    else:
                        if run_len > 1:
                            seqs.append((start, s[i-1], run_len))
                        start = s[i]
                        run_len = 1
                if run_len > 1:
                    seqs.append((start, s[-1], run_len))
                seqs.sort(key=lambda t: t[2], reverse=True)
                _, fim, _ = seqs[0]
                subs = None
                for c in comp:
                    if (c-1 not in a) and (c+1 not in a):
                        subs = c
                        break
                if subs is None:
                    subs = comp[0]
                a.remove(fim)
                a.append(subs)
                comp.remove(subs)
                changed = True
                a.sort()
            return changed

        def tentar_ajustar_paridade(a):
            min_par, max_par = alvo_par
            pares = self._contar_pares(a)
            if pares > max_par:
                rem = next((x for x in a if x % 2 == 0), None)
                add = next((c for c in comp if c % 2 == 1), None)
            elif pares < min_par:
                rem = next((x for x in a if x % 2 == 1), None)
                add = next((c for c in comp if c % 2 == 0), None)
            else:
                return False
            if rem is not None and add is not None:
                a.remove(rem)
                a.append(add)
                comp.remove(add)
                a.sort()
                return True
            return False

        for _ in range(10):
            m1 = tentar_quebrar_sequencias(aposta)
            m2 = tentar_ajustar_paridade(aposta)
            if not m1 and not m2:
                break
        return sorted(aposta)

    # --- Novo comando: /mestre (id√™ntico ao nosso fluxo manual) ---
    async def mestre(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Preset 'Mestre' baseado APENAS no √∫ltimo resultado do hist√≥rico.
        - Gera 10 apostas determin√≠sticas (9R‚Äì10R + 1x 8R + 1x 11R)
        - Paridade 7‚Äì8 e m√°x. sequ√™ncia = 3
        - Cobre ausentes ao longo do pacote
        """
        user_id = update.effective_user.id
        if not self._usuario_autorizado(user_id):
            await update.message.reply_text("‚õî Voc√™ n√£o est√° autorizado a gerar apostas.")
            return

        # cooldown por chat
        chat_id = update.effective_chat.id
        if self._hit_cooldown(chat_id, "mestre"):
            await update.message.reply_text(f"‚è≥ Aguarde {COOLDOWN_SECONDS}s para usar /mestre novamente.")
            return

        # carrega hist√≥rico e pega somente o √∫ltimo resultado
        try:
            historico = carregar_historico(HISTORY_PATH)
            if not historico:
                await update.message.reply_text("Erro: hist√≥rico vazio.")
                return
        except Exception as e:
            await update.message.reply_text(f"Erro ao carregar hist√≥rico: {e}")
            return

        try:
            apostas = self._gerar_mestre_por_ultimo_resultado(historico)
        except Exception as e:
            logger.error("Erro no preset Mestre (√∫ltimo resultado):\n" + traceback.format_exc())
            await update.message.reply_text(f"Erro no preset Mestre: {e}")
            return

        # formata√ß√£o
        linhas = ["üé∞ <b>SUAS APOSTAS INTELIGENTES ‚Äî Preset Mestre</b> üé∞\n"]
        for i, aposta in enumerate(apostas, 1):
            pares = self._contar_pares(aposta)
            linhas.append(
                f"<b>Aposta {i}:</b> {' '.join(f'{n:02d}' for n in aposta)}\n"
                f"üî¢ Pares: {pares} | √çmpares: {15 - pares}\n"
            )
        if SHOW_TIMESTAMP:
            now_sp = datetime.now(ZoneInfo(TIMEZONE))
            carimbo = now_sp.strftime("%Y-%m-%d %H:%M:%S %Z")
            linhas.append(f"<i>base=√∫ltimo resultado | paridade=7‚Äì8 | max_seq=3 | {carimbo}</i>")

        await update.message.reply_text("\n".join(linhas), parse_mode="HTML")

    # --- Comandos auxiliares (meuid, autorizar, remover) ---
    async def meuid(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        await update.message.reply_text(
            f"üÜî Seu ID: <code>{user_id}</code>\nUse este c√≥digo para libera√ß√£o.",
            parse_mode="HTML",
        )

    async def autorizar(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id != self.admin_id:
            return await update.message.reply_text("‚õî Voc√™ n√£o tem permiss√£o.")
        if len(context.args) != 1 or not context.args[0].isdigit():
            return await update.message.reply_text("Uso: /autorizar <ID>")
        user_id = int(context.args[0])
        self.whitelist.add(user_id)
        self._salvar_whitelist()
        await update.message.reply_text(f"‚úÖ Usu√°rio {user_id} autorizado.")

    async def remover(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id != self.admin_id:
            return await update.message.reply_text("‚õî Voc√™ n√£o tem permiss√£o.")
        if len(context.args) != 1 or not context.args[0].isdigit():
            return await update.message.reply_text("Uso: /remover <ID>")
        user_id = int(context.args[0])
        if user_id in self.whitelist:
            self.whitelist.remove(user_id)
            self._salvar_whitelist()
            await update.message.reply_text(f"‚úÖ Usu√°rio {user_id} removido.")
        else:
            await update.message.reply_text("‚ÑπÔ∏è Usu√°rio n√£o est√° na whitelist.")

    # ------------- Handler do backtest -------------
    async def backtest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Comando oculto /backtest ‚Äì apenas admin.
        Padr√£o: janela=100 | bilhetes=5 | Œ±=0,30
        """
        user_id = update.effective_user.id
        if not self._is_admin(user_id):
            return
        janela, bilhetes_por_concurso, alpha = self._parse_backtest_args(context.args)
        await update.message.reply_text(
            f"Executando backtest com janela={janela}, bilhetes={bilhetes_por_concurso}, Œ±={alpha:.2f}..."
        )
        loop = asyncio.get_running_loop()
        try:
            historico = carregar_historico(HISTORY_PATH)
            func = partial(
                executar_backtest_resumido,
                historico=historico,
                janela=janela,
                bilhetes_por_concurso=bilhetes_por_concurso,
                alpha=alpha,
            )
            resumo: str = await loop.run_in_executor(None, func)
            if len(resumo) > 4000:
                resumo = resumo[:4000] + "\n\n[Sa√≠da truncada]"
            await update.message.reply_text("üìä BACKTEST\n" + resumo)
        except Exception as e:
            logger.error("Erro no backtest:\n" + traceback.format_exc())
            await update.message.reply_text(f"Erro no backtest: {e}")

    def run(self):
        logger.info("Bot iniciado e aguardando comandos.")
        self.app.run_polling()

# ========================
# Execu√ß√£o
# ========================
if __name__ == "__main__":
    bot = LotoFacilBot()
    bot.run()



